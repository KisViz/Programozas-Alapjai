type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-azonos)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/azonos.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/azonos.c
  visible: true
  placeholders:
  - offset: 225
    length: 685
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 205
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      #include <string.h>
      int egyforma(Harcos h1, Harcos h2) {
          if (strcmp(h1.nev, h2.nev) != 0) {
              return 0;
          }

          if (h1.erosseg != h2.erosseg) {
              return 0;
          }

          if (h1.kitartas != h2.kitartas) {
              return 0;
          }

          if (h1.sebesseg != h2.sebesseg) {
              return 0;
          }

          if (strcmp(h1.fegyver.nev, h2.fegyver.nev) != 0) {
              return 0;
          }

          if (h1.fegyver.erosseg != h2.fegyver.erosseg) {
              return 0;
          }

          if (h1.fegyver.tavolsagi != h2.fegyver.tavolsagi) {
              return 0;
          }

          return 1;
      }
  text: |-
    typedef struct {
        char nev[100];
        int erosseg;
        int tavolsagi;
    } Fegyver;

    typedef struct {
        char nev[100];
        int erosseg;
        int kitartas;
        int sebesseg;
        Fegyver fegyver;
    } Harcos;

    // megoldas
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/azonos.c"
    #undef main

    Fegyver f1 = {"kosar", 3, 1};
    Fegyver f2 = {"kosar", 3, 2};
    Fegyver f4 = {"KOSAR", 3, 1};


    Harcos h1 = {"Marika", 10, 20, 30, f1};
    Harcos h2 = {"Marika", 11, 20, 30, f1};
    Harcos h3 = {"Marika", 10, 20, 31, f1};
    Harcos h4 = {"Marika", 10, 20, 30, f2};
    Harcos h5 = {"Marika", 10, 20, 30, f4};
    Harcos h6 = {"MARIKA", 10, 20, 30, f1};


    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h1;
        Harcos b = h2;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h1;
        Harcos b = h3;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h1;
        Harcos b = h4;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h1;
        Harcos b = h5;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h1;
        Harcos b = h6;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h2;
        Harcos b = h4;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h2;
        Harcos b = h6;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 08) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h2;
        Harcos b = h6;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 09) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h2;
        Harcos b = h2;
        int res = 1;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 10) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h6;
        Harcos b = h6;
        int res = 1;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }

    TEST(Teszt, 11) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        Harcos a = h4;
        Harcos b = h5;
        int res = 0;

        int result = egyforma(a, b);
        ASSERT_EQ(res, result);
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 20 Oct 2023 07:42:22 UTC"
record: -1
solution_hidden: true
