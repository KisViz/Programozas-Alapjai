type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-osztas)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/osztas.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/osztas.c
  visible: true
  placeholders:
  - offset: 0
    length: 169
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 0
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      #include <stdio.h>

      int osztas(int a, int b) {
          if (b != 0) {
              return a / b;
          }

          fprintf(stderr, "Hibas ertekek!\n");
          return 0;
      }
  text: // megoldas
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/osztas.c"
    #undef main

    #include "../../tools.cpp"

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 5;
        int b = 3;
        int res = 1;
        char err_res[] = "";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 10;
        int b = 5;
        int res = 2;
        char err_res[] = "";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 5;
        int b = 7;
        int res = 0;
        char err_res[] = "";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 5;
        int b = -3;
        int res = -1;
        char err_res[] = "";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = -50;
        int b = -3;
        int res = 16;
        char err_res[] = "";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 0;
        int b = 5;
        int res = 0;
        char err_res[] = "";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }

    TEST(Teszt, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 5;
        int b = 0;
        int res = 0;
        char err_res[] = "Hibas ertekek!\n";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }

    TEST(Teszt, 08) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 0;
        int b = 0;
        int res = 0;
        char err_res[] = "Hibas ertekek!\n";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }

    TEST(Teszt, 09) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 1;
        int b = 1;
        int res = 1;
        char err_res[] = "";

        char str[100];
        IO("", int fgvres = osztas(a, b), str);
        ASSERT_EQ(fgvres, res);
        ASSERT_STREQ(err_res, error_string);
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 24 Oct 2023 11:02:36 UTC"
record: -1
solution_hidden: true
