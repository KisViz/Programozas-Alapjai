type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-megfordit)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/megfordit.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/megfordit.c"
    #undef main

    #include "../../tools.cpp"

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[100];
        IO("5 6 3 2 0", int res = main_0(), str)
        ASSERT_STREQ(str, "2 3 6 5 \n");
        ASSERT_EQ(res, 0);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[100];
        IO("4 0", int res = main_0(), str)
        ASSERT_STREQ(str, "4 \n");
        ASSERT_EQ(res, 0);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[100];
        IO("0", int res = main_0(), str)
        ASSERT_STREQ(str, "\n");
        ASSERT_EQ(res, 0);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[100];
        IO("2 3 4 5 6 7 8 9 10 1 11 12 13 14 15 15 16 17 0", int res = main_0(), str)
        ASSERT_STREQ(str, "17 16 15 15 14 13 12 11 1 10 9 8 7 6 5 4 3 2 \n");
        ASSERT_EQ(res, 0);
    }
  learner_created: false
- name: src/megfordit.c
  visible: true
  placeholders:
  - offset: 0
    length: 271
    placeholder_text: |-
      #include <stdio.h>

      int main() {
          int szamok[50];

          int i = -1;

          do {
              scanf("%f", szamok[i]);
              i++;
          } while (szamok[i] != 0);

          for (int j = i - 2; j >= 0; j--) {
              printf('%d ', szamok[j]);
          }

          printf("\n);

          return 0;
    initial_state:
      length: 267
      offset: 0
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      #include <stdio.h>

      int main() {
          int szamok[50];

          int i = 0;

          do {
              scanf("%d", &szamok[i]);
              i++;
          } while (szamok[i-1] != 0);

          for (int j = i - 2; j >= 0; j--) {
              printf("%d ", szamok[j]);
          }

          printf("\n");

          return 0;
      }
  text: |-
    #include <stdio.h>

    int main() {
        int szamok[50];

        int i = -1;

        do {
            scanf("%f", szamok[i]);
            i++;
        } while (szamok[i] != 0);

        for (int j = i - 2; j >= 0; j--) {
            printf('%d ', szamok[j]);
        }

        printf("\n);

        return 0;
  learner_created: false
status: Solved
record: -1
solution_hidden: true
