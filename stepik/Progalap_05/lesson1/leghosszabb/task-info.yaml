type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-leghosszabb)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            test/task.cpp)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: test/task.cpp
  visible: false
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #include "../../tools.cpp"

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        std::vector<string> errors {
            "warning: 'return' with no value, in function returning non-void",
            "warning: too many arguments for format",
            "warning: format '%s' expects argument of type 'char *', but argument 2 has type 'char (*)[1000]'",
            "warning: implicit declaration of function 'strcpi'",
            "error: #include expects \"FILENAME\" or <FILENAME>"
        };

        CHECK_COMPILER_ERROR_LIMIT("leghosszabb", "leghosszabb.c", errors, 4, 1)
    }
  learner_created: false
- name: src/leghosszabb.c
  visible: true
  placeholders:
  - offset: 0
    length: 420
    placeholder_text: |-
      #include <stdio.h>
      #include <string.h>

      int main() {
          char str[1000];
          char leghosszabb[1000];
          leghosszabb[0] = 0;

          do {
              scanf("%s", str);
              if (strlen(str) > strlen(leghosszabb)) {
                  strcpy(leghosszabb, str);
              }

              printf("%d %s\n", strlen(str), str);
          } while (strcmp(str, "-") != 0);

          printf("A leghosszabb szo: %s", leghosszabb);

          return 0;
      }
    initial_state:
      length: 408
      offset: 0
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      #include stdio.h
      #include <string.h>

      int main() {
          char str[1000];
          char leghosszabb[1000];
          leghosszabb[0] = 0;

          do {
              scanf("%s", &str);
              if (strlen(str) > strlen(leghosszabb)) {
                  strcpi(leghosszabb, str);
              }

              printf("%d %s\n", strlen(str), str);
          } while (strcmp(str, "-") != 0);

          printf("A leghosszabb szo: %s", leghosszabb, leghosszabb);

          return;
      }
  text: |-
    #include <stdio.h>
    #include <string.h>

    int main() {
        char str[1000];
        char leghosszabb[1000];
        leghosszabb[0] = 0;

        do {
            scanf("%s", str);
            if (strlen(str) > strlen(leghosszabb)) {
                strcpy(leghosszabb, str);
            }

            printf("%d %s\n", strlen(str), str);
        } while (strcmp(str, "-") != 0);

        printf("A leghosszabb szo: %s", leghosszabb);

        return 0;
    }
  learner_created: false
status: Solved
record: -1
solution_hidden: true
