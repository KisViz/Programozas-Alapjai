type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.20)

    project(global-lesson1-magas)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/magas.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/magas.c
  visible: true
  placeholders:
  - offset: 164
    length: 88
    placeholder_text: return NULL;
    initial_state:
      length: 12
      offset: 164
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      if (fa1->magassag == fa2->magassag) {
              return NULL;
          }

          return fa1->magassag > fa2->magassag ? fa1 : fa2;
  text: |-
    #include <stdlib.h>

    typedef struct {
        const char* fajta;
        unsigned magassag;
    } Karacsonyfa;

    Karacsonyfa* magasabb(Karacsonyfa* fa1, Karacsonyfa* fa2) {
        return NULL;
    }
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |
    #include <gtest/gtest.h>
    #include <string>

    using namespace std;

    #define main main_0
    #include "../src/magas.c"
    #undef main

    Karacsonyfa k1 = {"Luc", 5};
    Karacsonyfa k2 = {"Luc", 7};
    Karacsonyfa k3 = {"Luc", 7};
    Karacsonyfa k4 = {"Luc", 3};

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k1, &k2), &k2);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k1, &k3), &k3);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k1, &k4), &k1);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k2, &k3), nullptr);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k2, &k4), &k2);
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k3, &k4), &k3);
    }

    TEST(Teszt, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k4, &k4), nullptr);
    }

    TEST(Teszt, 08) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k3, &k3), nullptr);
    }

    TEST(Teszt, 09) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k2, &k2), nullptr);
    }

    TEST(Teszt, 10) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(magasabb(&k1, &k1), nullptr);
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 17 Nov 2023 16:52:56 UTC"
record: -1
solution_hidden: true
