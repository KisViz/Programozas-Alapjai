type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-korrigalas)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/korrigalas.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/korrigalas.c
  visible: true
  placeholders:
  - offset: 0
    length: 238
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 0
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      void korrigal(int* ertek, int min, int max) {
          if (*ertek < min) {
              *ertek = min;
          } else if (*ertek > max) {
              *ertek = max;
          }
      }

      int ellenoriz(const int* ertek, int min, int max) {
          return *ertek < min || *ertek > max ? 0 : 1;
      }
  text: // megoldas
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/korrigalas.c"
    #undef main

    TEST(korrigal, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 7;

        korrigal(&a, 0, 10);
        ASSERT_EQ(a, 7);
    }

    TEST(korrigal, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 7;
        korrigal(&a, -2, 3);
        ASSERT_EQ(a, 3);
    }

    TEST(korrigal, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 3;
        korrigal(&a, 5, 10);
        ASSERT_EQ(a, 5);
    }

    TEST(korrigal, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int a = 5;
        korrigal(&a, 3, 5);
        ASSERT_EQ(a, 5);
    }

    TEST(ellenoriz, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const int a = 8;
        ASSERT_EQ(ellenoriz(&a, 3, 9), 1);
    }

    TEST(ellenoriz, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const int a = 8;
        ASSERT_EQ(ellenoriz(&a, 2, 6), 0);
    }

    TEST(ellenoriz, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const int a = 8;
        ASSERT_EQ(ellenoriz(&a, 5, 8), 1);
    }

    TEST(ellenoriz, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const int a = 8;
        ASSERT_EQ(ellenoriz(&a, 10, 20), 0);
    }

    TEST(ellenoriz, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const int a = 8;
        ASSERT_EQ(ellenoriz(&a, 8, 12), 1);
    }

    TEST(ellenoriz, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const int a = 8;
        ASSERT_EQ(ellenoriz(&a, -10, -5), 0);
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 17 Nov 2023 17:09:44 UTC"
record: -1
solution_hidden: true
