type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-osszeg)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/kiadas.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/kiadas.c
  visible: true
  placeholders:
  - offset: 0
    length: 11
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      #include <stdlib.h>
      #include <string.h>
      #include <math.h>

      int atvalt(const char* szam) {
          int hossz = strlen(szam);
          int osszeg = 0;
          for (int i = 0; i < hossz; i++) {
              osszeg += (szam[i] - '0') * pow(2, hossz - i - 1);
          }
          return osszeg;
      }

      int osszeg(const char * const * szamok) {
          int ossz = 0;
          for (int i = 0; szamok[i] != NULL; i++) {
              ossz += atvalt(szamok[i]);
          }
          return ossz;
      }
  text: // megoldas
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/kiadas.c"
    #undef main

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char* s1 = "100101";
        const char* s2 = "101010";
        const char* s3 = "10010111";
        const char* s4 = "1";

        int elvart = 231;

        const char* const szamok[] = {s1, s2, s3, s4, NULL};
        ASSERT_EQ(osszeg(szamok), elvart);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char* s1 = "1000101011";
        const char* s2 = "101010110";
        const char* s3 = "1";
        const char* s4 = "110";

        int elvart = 904;

        const char* const szamok[] = {s1, s2, s3, s4, NULL};
        ASSERT_EQ(osszeg(szamok), elvart);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char* s1 = "1";
        const char* s2 = "1111111111";

        int elvart = 1024;

        const char* const szamok[] = {s1, s2, NULL};
        ASSERT_EQ(osszeg(szamok), elvart);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char* s1 = "1010110101010101101";
        const char* s2 = "10011101010101010101010";
        const char* s3 = "11";
        const char* s4 = "11111111111111111111111111";

        int elvart = 72619353;

        const char* const szamok[] = {s1, s2, s3, s4, NULL};
        ASSERT_EQ(osszeg(szamok), elvart);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char* s1 = "0";
        const char* s2 = "10";

        int elvart = 2;

        const char* const szamok[] = {s1, s2, NULL};
        ASSERT_EQ(osszeg(szamok), elvart);
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char* s1 = "100";

        int elvart = 4;

        const char* const szamok[] = {s1, NULL};
        ASSERT_EQ(osszeg(szamok), elvart);
    }
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
