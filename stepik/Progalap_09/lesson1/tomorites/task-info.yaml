type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-tomorites)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/tomorites.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/tomorites.c
  visible: true
  placeholders:
  - offset: 80
    length: 12
    placeholder_text: return NULL;
    initial_state:
      length: 12
      offset: 80
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      int maxhossz = 0;
          int darabszam = 0;

          for (; szovegek[darabszam] != NULL; darabszam++) {
              int hossz = strlen(szovegek[darabszam]);

              if (hossz > maxhossz) {
                  maxhossz = hossz;
              }

              for (int i = 0; i < hossz; i++) {
                  if (!(szovegek[darabszam][i] >= 'a' && szovegek[darabszam][i] <= 'z')) {
                      return NULL;
                  }
              }

          }

          char* eredmeny = (char*) malloc((maxhossz + 1) * sizeof(char));
          for (int i = 0; i < maxhossz; i++) {
              eredmeny[i] = 'a';
          }
          eredmeny[maxhossz] = 0;

          for (int i = 0; i < darabszam; i++) {
              int j = 0;
              while (szovegek[i][j] != 0) {
                  eredmeny[j] += (szovegek[i][j] - 'a');

                  if (eredmeny[j] > 'z') {
                      free(eredmeny);
                      return NULL;
                  }

                  j++;
              }
          }

          return eredmeny;
  text: |-
    #include <stdlib.h>
    #include <string.h>

    char* tomorites(char** szovegek) {
        return NULL;
    }
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/tomorites.c"
    #undef main

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "cica";
        char s2[] = "baba";
        char s3[] = "bean";
        char elvart[] = "emdn";

        char* szovegek[] = {s1, s2, s3, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "belt";
        char s2[] = "me";
        char s3[] = "a";
        char elvart[] = "nilt";

        char* szovegek[] = {s1, s2, s3, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "belt";
        char s2[] = "meag";
        char s3[] = "a";
        char elvart[] = "nilz";

        char* szovegek[] = {s1, s2, s3, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "belt";
        char s2[] = "meah";
        char s3[] = "a";
        char* elvart = NULL;

        char* szovegek[] = {s1, s2, s3, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "bElt";
        char s2[] = "meaa";
        char s3[] = "a";
        char* elvart = NULL;

        char* szovegek[] = {s1, s2, s3, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "belt";
        char s2[] = "meaa";
        char s3[] = "aaa";
        char s4[] = "aaaa";
        char s5[] = "aaaaaaaaaaa a";
        char s6[] = "aa";
        char s7[] = "aaa";
        char s8[] = "aaa";
        char* elvart = NULL;

        char* szovegek[] = {s1, s2, s3, s4, s5, s6, s7, s8, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }

    TEST(Teszt, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "abba";
        char s2[] = "meow";
        char s3[] = "bacac";
        char s4[] = "bbbbbbbbbbba";
        char elvart[] = "ogsxdbbbbbba";

        char* szovegek[] = {s1, s2, s3, s4, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }

    TEST(Teszt, 08) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "aaaa";
        char s2[] = "aa";
        char s3[] = "aaaaa";
        char s4[] = "a";
        char elvart[] = "aaaaa";

        char* szovegek[] = {s1, s2, s3, s4, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }

    TEST(Teszt, 09) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char s1[] = "macska";
        char elvart[] = "macska";

        char* szovegek[] = {s1, NULL};
        char* res = tomorites(szovegek);
        ASSERT_STREQ(res, elvart);
        free(res);
    }
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
