type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.20)

    project(global-lesson1-novekedes)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/novekedes.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/novekedes.c
  visible: true
  placeholders:
  - offset: 82
    length: 20
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 82
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: return eredeti - 'a' + 'A';
  text: |-
    char megnovel(char eredeti) {
        if (eredeti >= 'a' && eredeti <= 'z') {
            // megoldas
        }

        return eredeti;
    }
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/novekedes.c"
    #undef main

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('A', megnovel('a'));
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('S', megnovel('s'));
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('Q', megnovel('q'));
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('7', megnovel('7'));
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('@', megnovel('@'));
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('K', megnovel('K'));
    }

    TEST(Teszt, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('.', megnovel('.'));
    }

    TEST(Teszt, 08) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('!', megnovel('!'));
    }

    TEST(Teszt, 09) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('Z', megnovel('Z'));
    }

    TEST(Teszt, 10) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('`', megnovel('`'));
    }

    TEST(Teszt, 11) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('{', megnovel('{'));
    }

    TEST(Teszt, 12) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ(' ', megnovel(' '));
    }

    TEST(Teszt, 13) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('L', megnovel('l'));
    }

    TEST(Teszt, 14) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('[', megnovel('['));
    }

    TEST(Teszt, 15) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        ASSERT_EQ('Y', megnovel('y'));
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 04 Oct 2023 14:33:32 UTC"
record: -1
solution_hidden: true
