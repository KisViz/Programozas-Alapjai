type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-konstans)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/konstans.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/konstans.c
  visible: true
  placeholders:
  - offset: 0
    length: 466
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      int szamlalas(char** szovegek, int darab) {
          int egyforma = 0;
          for (int i = 0; i < darab; i++) {
              if (szovegek[i][0] == 0) {
                  egyforma++;
                  continue;
              }

              char elso = szovegek[i][0];
              int j = 1;
              while (szovegek[i][j] != 0) {
                  if (szovegek[i][j] != elso) {
                      goto vege;
                  }

                  j++;
              }

              egyforma++;
              vege: ;
          }

          return egyforma;
      }
  text: // megoldas
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>
    #include <string>

    #define main main_0
    #include "../src/konstans.c"
    #undef main

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int db = 3;
        int solution = 2;

        char** szov = (char**) malloc(db * sizeof(char*));

        szov[0] = (char*) malloc(100);strcpy(szov[0], "macska");
        szov[1] = (char*) malloc(100);strcpy(szov[1], "llll");
        szov[2] = (char*) malloc(100);strcpy(szov[2], "s");

        int res = szamlalas(szov, db);
        ASSERT_EQ(res, solution);

        for (int i = 0; i < db; i++) {
            free(szov[i]);
        }

        free(szov);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int db = 4;
        int solution = 2;

        char** szov = (char**) malloc(db * sizeof(char*));

        szov[0] = (char*) malloc(100);strcpy(szov[0], "lvknsv");
        szov[1] = (char*) malloc(100);strcpy(szov[1], "       ");
        szov[2] = (char*) malloc(100);strcpy(szov[2], "mmmm mm");
        szov[3] = (char*) malloc(100);strcpy(szov[3], "?????");

        int res = szamlalas(szov, db);
        ASSERT_EQ(res, solution);

        for (int i = 0; i < db; i++) {
            free(szov[i]);
        }

        free(szov);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int db = 2;
        int solution = 2;

        char** szov = (char**) malloc(db * sizeof(char*));

        szov[0] = (char*) malloc(100);strcpy(szov[0], "q");
        szov[1] = (char*) malloc(100);strcpy(szov[1], "++");

        int res = szamlalas(szov, db);
        ASSERT_EQ(res, solution);

        for (int i = 0; i < db; i++) {
            free(szov[i]);
        }

        free(szov);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int db = 4;
        int solution = 0;

        char** szov = (char**) malloc(db * sizeof(char*));

        szov[0] = (char*) malloc(100);strcpy(szov[0], "lvknsv");
        szov[1] = (char*) malloc(100);strcpy(szov[1], "????;");
        szov[2] = (char*) malloc(100);strcpy(szov[2], "ccccc aaaaa bbbbb");
        szov[3] = (char*) malloc(100);strcpy(szov[3], "alma");

        int res = szamlalas(szov, db);
        ASSERT_EQ(res, solution);

        for (int i = 0; i < db; i++) {
            free(szov[i]);
        }

        free(szov);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int db = 5;
        int solution = 3;

        char** szov = (char**) malloc(db * sizeof(char*));

        szov[0] = (char*) malloc(100);strcpy(szov[0], " ");
        szov[1] = (char*) malloc(100);strcpy(szov[1], "");
        szov[2] = (char*) malloc(100);strcpy(szov[2], "k\0kka");
        szov[3] = (char*) malloc(100);strcpy(szov[3], "cic");
        szov[4] = (char*) malloc(100);strcpy(szov[4], "hihihihihi");

        int res = szamlalas(szov, db);
        ASSERT_EQ(res, solution);

        for (int i = 0; i < db; i++) {
            free(szov[i]);
        }

        free(szov);
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 07 Nov 2023 12:25:48 UTC"
record: -1
solution_hidden: true
