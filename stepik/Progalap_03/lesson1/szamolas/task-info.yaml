type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-szamolas)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/szamolas.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/szamolas.c
  visible: true
  placeholders:
  - offset: 0
    length: 251
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 0
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      int betuszamitas(char szoveg[], char betu) {
          int i = 0;
          int db = 0;

          while (szoveg[i] != 0) {
              if (szoveg[i] == betu || szoveg[i] == betu - 'a' + 'A') {
                  db++;
              }

              i++;
          }

          return db;
      }
  text: // megoldas
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/szamolas.c"
    #undef main

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[] = "macska";
        char betu = 'a';
        int res = 2;

        ASSERT_EQ(betuszamitas(str, betu), res);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[] = "zzzzzzzzzzz";
        char betu = 'z';
        int res = 11;

        ASSERT_EQ(betuszamitas(str, betu), res);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[] = "alma";
        char betu = 'l';
        int res = 1;

        ASSERT_EQ(betuszamitas(str, betu), res);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[] = "macska";
        char betu = 'z';
        int res = 0;

        ASSERT_EQ(betuszamitas(str, betu), res);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[] = "";
        char betu = 's';
        int res = 0;

        ASSERT_EQ(betuszamitas(str, betu), res);
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[] = "AAAAAAA";
        char betu = 'a';
        int res = 7;

        ASSERT_EQ(betuszamitas(str, betu), res);
    }

    TEST(Teszt, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[] = "AAAAAbbbBAAa";
        char betu = 'a';
        int res = 8;

        ASSERT_EQ(betuszamitas(str, betu), res);
    }

    TEST(Teszt, 08) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        char str[] = "A macska felmaszott a fara. Famacska lett.";
        char betu = 'f';
        int res = 3;

        ASSERT_EQ(betuszamitas(str, betu), res);
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 09 Oct 2023 12:27:51 UTC"
record: -1
solution_hidden: true
