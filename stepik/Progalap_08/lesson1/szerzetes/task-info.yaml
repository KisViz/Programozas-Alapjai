type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-szerzetes)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/szerzetes.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/szerzetes.c
  visible: true
  placeholders:
  - offset: 205
    length: 0
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 0
    initialized_from_dependency: false
    selected: true
    status: Unchecked
    encrypted_possible_answer: |-
      #include <stdlib.h>
      #include <string.h>

      const char* masolat(const char* eredeti) {
          char* masolt = (char*) malloc((strlen(eredeti) + 1) * sizeof(char));
          strcpy(masolt, eredeti);
          return masolt;
      }
  text: // megoldas
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/szerzetes.c"
    #undef main

    #include "../../tools.cpp"

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char eredeti[] = "Itt a cica";
        const char* lemasolt = masolat(eredeti);
        ASSERT_NE(eredeti, lemasolt);
        ASSERT_STREQ(eredeti, lemasolt);
        free((char*)lemasolt);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char eredeti[] = "";
        const char* lemasolt = masolat(eredeti);
        ASSERT_NE(eredeti, lemasolt);
        ASSERT_STREQ(eredeti, lemasolt);
        free((char*)lemasolt);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char eredeti[] = "Az emberke ellatogatott a mezore, ahol egy tehennel talalkozott: muuuu - mondta a tehen. Az ember nem ertette mit akar a tehen, igy tovabb setalt.";
        const char* lemasolt = masolat(eredeti);
        ASSERT_NE(eredeti, lemasolt);
        ASSERT_STREQ(eredeti, lemasolt);
        free((char*)lemasolt);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char eredeti[] = "5000 macska";
        const char* lemasolt = masolat(eredeti);
        ASSERT_NE(eredeti, lemasolt);
        ASSERT_STREQ(eredeti, lemasolt);
        free((char*)lemasolt);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char eredeti[] = "@@@!!!!++++00000000000001313131";
        const char* lemasolt = masolat(eredeti);
        ASSERT_NE(eredeti, lemasolt);
        ASSERT_STREQ(eredeti, lemasolt);
        free((char*) lemasolt);
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        const char eredeti[] = "AAA";
        const char *lemasolt = masolat(eredeti);
        ASSERT_NE(eredeti, lemasolt);
        ASSERT_STREQ(eredeti, lemasolt);
        ASSERT_TRUE(isConst(lemasolt[0]));
        free((char*) lemasolt);
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 25 Nov 2023 16:45:57 UTC"
record: -1
solution_hidden: true
