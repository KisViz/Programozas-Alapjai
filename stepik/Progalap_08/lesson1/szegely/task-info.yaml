type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-szegely)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/szegely.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/szegely.c"
    #undef main

    #include "../../tools.cpp"

    void teszteles(int sorok, int oszlopok, char normalbetu, char szegelybetu) {
        char** szoveg = szegely(sorok, oszlopok, normalbetu, szegelybetu);
        for (int i = 0; i < sorok; i++) {
            for (int j = 0; j < oszlopok; j++) {
                    ASSERT_EQ(szoveg[i][j], i == 0 || j == 0 || i == sorok-1 || j == oszlopok-1 ? szegelybetu : normalbetu);
            }
        }

        for (int i = 0; i < sorok; i++) {
            free(szoveg[i]);
        }
        free(szoveg);
    }

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(7, 5, 'a', 'b');
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(2, 2, 'a', 'b');
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(100, 30, 'a', 'b');
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(1000, 1000, 'S', '*');
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(100000, 3, '*', 'B');
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(3, 100000, '?', '!');
    }

    TEST(Teszt, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(2, 2, '?', '!');
    }

    TEST(Teszt, 08) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(1, 100, '?', '!');
    }

    TEST(Teszt, 09) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(100, 1, '?', '!');
    }

    TEST(Teszt, 10) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        teszteles(1, 1, '?', '!');
    }
  learner_created: false
- name: src/szegely.c
  visible: true
  placeholders:
  - offset: 102
    length: 12
    placeholder_text: return NULL;
    initial_state:
      length: 12
      offset: 102
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      char** tabla = (char**) malloc(sorok * sizeof(char*));
          for (int i = 0; i < sorok; i++) {
              tabla[i] = (char*) malloc(oszlopok * sizeof(char));
          }

          for (int i = 0; i < sorok; i++) {
              for (int j = 0; j < oszlopok; j++) {
                  if (i == 0 || j == 0 || i == sorok-1 || j == oszlopok-1) {
                      tabla[i][j] = szegelyBetu;
                  } else {
                      tabla[i][j] = normalBetu;
                  }
              }
          }

          return tabla;
  text: |
    #include <stdlib.h>

    char** szegely(int sorok, int oszlopok, char normalBetu, char szegelyBetu) {
        return NULL;
    }
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
