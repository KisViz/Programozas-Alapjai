type: edu
files:
- name: CMakeLists.txt
  visible: false
  text: |-
    cmake_minimum_required(VERSION 3.16)

    project(global-lesson1-negyzetszamok)

    set(CMAKE_CXX_STANDARD 14)

    # Files from `./src` directory
    set(SRC
            src/negyzetszamok.c)

    # Files from `./test` directory
    set(TEST
            test/test.cpp)


    # Running learner side code
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    add_executable(${PROJECT_NAME}-run ${SRC})

    # Running tests
    # Use PROJECT_NAME dependent names of targets for the plugin support to work correctly.
    configure_test_target(${PROJECT_NAME}-test ${SRC} ${TEST})
  learner_created: false
- name: src/negyzetszamok.c
  visible: true
  placeholders:
  - offset: 54
    length: 11
    placeholder_text: // megoldas
    initial_state:
      length: 11
      offset: 54
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      int legnagyobb = -1;

          for (int i = 0; i < darab; i++) {
              int negyzet = 0;

              if (legnagyobb >= szamok[i]) {
                  continue;
              }

              for (int j = 1; j*j <= szamok[i]; j++) {
                  if (j*j == szamok[i]) {
                      negyzet = 1;
                  }
              }

              if (negyzet && szamok[i] > legnagyobb) {
                  legnagyobb = szamok[i];
              }
          }

          return legnagyobb;
  text: |-
    int negyzetszamok(const int* szamok, int darab) {
        // megoldas
    }
  learner_created: false
- name: test/test.cpp
  visible: false
  text: |-
    #include <gtest/gtest.h>

    #define main main_0
    #include "../src/negyzetszamok.c"
    #undef main

    #include "../../tools.cpp"

    TEST(Teszt, 01) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int tomb[] = {4, 6, 4, 5, 22, 4000};
        int darab = 6;
        int elvart = 4;
        CHECK_RUNNING_TIME(
            ASSERT_EQ(negyzetszamok(tomb, darab), elvart),
            5);
    }

    TEST(Teszt, 02) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int tomb[] = {1, 6, 4, 5, 22, 4000};
        int darab = 6;
        int elvart = 4;
        CHECK_RUNNING_TIME(
            ASSERT_EQ(negyzetszamok(tomb, darab), elvart),
            5);
    }

    TEST(Teszt, 03) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int tomb[] = {4, 9, 16, 4, 9, 4};
        int darab = 6;
        int elvart = 16;
        CHECK_RUNNING_TIME(
            ASSERT_EQ(negyzetszamok(tomb, darab), elvart),
            5);
    }

    TEST(Teszt, 04) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int tomb[] = {3, 5, 11, 4141, 4125461, 16};
        int darab = 5;
        int elvart = -1;
        CHECK_RUNNING_TIME(
            ASSERT_EQ(negyzetszamok(tomb, darab), elvart),
            5);
    }

    TEST(Teszt, 05) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int tomb[] = {1179441649, 1394499649, 11175649, 1878615649, 1878442281};
        int darab = 5;
        int elvart = 1878615649;
        CHECK_RUNNING_TIME(
            ASSERT_EQ(negyzetszamok(tomb, darab), elvart),
            5);
    }

    TEST(Teszt, 06) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        int tomb[46000];
        for (int i = 1; i < 46000; i++) {
            tomb[i] = i*i;
        }

        tomb[0] = 7;
        tomb[3] = 2125210000;

        int darab = 46000;
        int elvart = 2125210000;

        CHECK_RUNNING_TIME(
            ASSERT_EQ(negyzetszamok(tomb, darab), elvart),
            5);
    }

    TEST(Teszt, 07) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        CHECK_RUNNING_TIME(
            for (int a = 0; a < 3000; a++) {
                int tomb[46000];
                for (int i = 1; i < 46000; i++) {
                    tomb[i] = 2125210000;
                }
                tomb[0] = 7;
                int darab = 46000;
                int elvart = 2127146641; tomb[3] = elvart;


                ASSERT_EQ(negyzetszamok(tomb, darab), elvart);
            }, 5);
    }

    TEST(Teszt, 08) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        CHECK_RUNNING_TIME(
            for (int a = 0; a < 3000; a++) {
                int tomb[46000];
                for (int i = 1; i < 46000; i++) {
                    tomb[i] = 2125210000;
                }
                int darab = 46000;
                int elvart = 2125210000;


                ASSERT_EQ(negyzetszamok(tomb, darab), elvart);
            }, 5);
    }

    TEST(Teszt, 09) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        CHECK_RUNNING_TIME(
            for (int a = 0; a < 3000; a++) {
                int tomb[46000];
                for (int i = 1; i < 46000; i++) {
                    tomb[i] = 2125210000;
                }
                int darab = 46000;
                int elvart = 2125210000;

                ASSERT_EQ(negyzetszamok(tomb, darab), elvart);
            }, 5);
    }

    TEST(Teszt, 10) { // NOLINT(cert-err58-cpp) suppress for initialization static field in generated class
        CHECK_RUNNING_TIME(
            for (int a = 0; a < 3000; a++) {
                int tomb[46000];
                for (int i = 1; i < 46000; i++) {
                    tomb[i] = 2125210000;
                }
                int darab = 46000;
                int elvart = 2125210000;

                ASSERT_EQ(negyzetszamok(tomb, darab), elvart);
            }, 5);
    }
  learner_created: false
status: Unchecked
record: -1
solution_hidden: true
